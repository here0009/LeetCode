"""
两个(具有不同单词的)文档的交集(intersection)中元素的个数除以并集(union)中元素的个数，就是这两个文档的相似度。例如，{1, 5, 3} 和 {1, 7, 2, 3} 的相似度是 0.4，其中，交集的元素有 2 个，并集的元素有 5 个。给定一系列的长篇文档，每个文档元素各不相同，并与一个 ID 相关联。它们的相似度非常“稀疏”，也就是说任选 2 个文档，相似度都很接近 0。请设计一个算法返回每对文档的 ID 及其相似度。只需输出相似度大于 0 的组合。请忽略空文档。为简单起见，可以假定每个文档由一个含有不同整数的数组表示。

输入为一个二维数组 docs，docs[i] 表示 id 为 i 的文档。返回一个数组，其中每个元素是一个字符串，代表每对相似度大于 0 的文档，其格式为 {id1},{id2}: {similarity}，其中 id1 为两个文档中较小的 id，similarity 为相似度，精确到小数点后 4 位。以任意顺序返回数组均可。

示例:

输入: 
[
  [14, 15, 100, 9, 3],
  [32, 1, 9, 3, 5],
  [15, 29, 2, 6, 8, 7],
  [7, 10]
]
输出:
[
  "0,1: 0.2500",
  "0,2: 0.1000",
  "2,3: 0.1429"
]
提示：

docs.length <= 500
docs[i].length <= 500

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sparse-similarity-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""


from typing import List
class Solution:
    def computeSimilarities(self, docs: List[List[int]]) -> List[str]:
        """
        应该是 .xx5的有理数存储到浮点数的时候成了 .xx499999999999, 然后4舍5入就WA了
        """
        edges = dict()
        min_v = 1E-9
        res = []
        for i, v in enumerate(docs):
            edges[i] = set(v)
        for i in range(len(docs)):
            for j in range(i + 1, len(docs)):
                inter = len(edges[i] & edges[j])
                if inter > 0:
                    total = len(edges[i] | edges[j])
                    res.append("{},{}: {:.4f}".format(i, j, inter / total + min_v))
        return res


S = Solution()
docs = [[14, 15, 100, 9, 3], [32, 1, 9, 3, 5], [15, 29, 2, 6, 8, 7], [7, 10]]
print(S.computeSimilarities(docs))


l1 = ["0,63: 0.0147","2,13: 0.0192","2,49: 0.0133","2,56: 0.0164","2,79: 0.0156","3,56: 0.0133","3,68: 0.0112","3,73: 0.0250","4,44: 0.0208","4,58: 0.0185","4,59: 0.0227","4,79: 0.0159","4,87: 0.0208","5,48: 0.0476","5,55: 0.0333","5,72: 0.0345","6,8: 0.0278","6,56: 0.0217","7,9: 0.0175","7,75: 0.0164","7,84: 0.0179","8,46: 0.0244","9,37: 0.0189","10,91: 0.0159","10,99: 0.0147","12,14: 0.0182","12,76: 0.0172","12,82: 0.0164","12,92: 0.0400","13,20: 0.0286","13,21: 0.0145","13,37: 0.0204","13,56: 0.0161","13,88: 0.0139","14,34: 0.0185","14,99: 0.0238","16,17: 0.0556","16,65: 0.0270","16,85: 0.0182","16,92: 0.0357","18,28: 0.0244","18,31: 0.0182","18,43: 0.0169","19,21: 0.0179","19,47: 0.0244","19,71: 0.0278","19,94: 0.0175","20,29: 0.0323","20,38: 0.0185","20,72: 0.0435","20,84: 0.0263","20,88: 0.0185","21,36: 0.0109","21,50: 0.0120","21,75: 0.0130","21,79: 0.0123","21,88: 0.0114","22,90: 0.0244","23,58: 0.0127","23,59: 0.0145","23,95: 0.0123","23,98: 0.0102","24,72: 0.0233","25,66: 0.0244","25,72: 0.0208","27,67: 0.0385","27,76: 0.0149","27,93: 0.0135","28,75: 0.0208","30,56: 0.0233","30,93: 0.0189","31,56: 0.0159","32,95: 0.0294","33,74: 0.0244","35,59: 0.0161","36,87: 0.0137","37,42: 0.0278","38,67: 0.0143","38,97: 0.0161","39,71: 0.0303","39,77: 0.0435","39,90: 0.0435","40,59: 0.0294","40,66: 0.0455","40,90: 0.0370","41,50: 0.0189","41,78: 0.0179","42,76: 0.0192","43,44: 0.0182","43,70: 0.0182","44,45: 0.0149","44,78: 0.0149","44,90: 0.0278","45,75: 0.0128","45,83: 0.0161","46,62: 0.0400","47,81: 0.0167","47,85: 0.0167","48,51: 0.1250","48,86: 0.0714","50,52: 0.0179","50,87: 0.0156","51,69: 0.0238","53,64: 0.0182","53,86: 0.0238","54,75: 0.0123","54,96: 0.0172","55,95: 0.0213","56,67: 0.0167","57,66: 0.0208","57,93: 0.0116","58,69: 0.0143","58,87: 0.0189","60,64: 0.0250","62,90: 0.0455","63,93: 0.0112","65,94: 0.0172","69,80: 0.0130","70,80: 0.0167","71,87: 0.0217","72,77: 0.0370","74,75: 0.0185","74,90: 0.0312","75,78: 0.0128","75,89: 0.0244","78,85: 0.0132","81,99: 0.0122","82,89: 0.0208","87,90: 0.0278","88,91: 0.0111","91,98: 0.0108","92,98: 0.0185"]
l2 = ["60,64: 0.0250","18,43: 0.0169","27,67: 0.0385","2,56: 0.0164","35,59: 0.0161","27,76: 0.0149","19,71: 0.0278","36,87: 0.0137","69,80: 0.0130","44,90: 0.0278","2,49: 0.0133","19,94: 0.0175","3,73: 0.0250","27,93: 0.0135","43,44: 0.0182","3,68: 0.0112","44,78: 0.0149","45,83: 0.0161","20,72: 0.0435","12,82: 0.0164","78,85: 0.0132","12,92: 0.0400","70,80: 0.0167","4,87: 0.0208","53,64: 0.0182","28,75: 0.0208","18,31: 0.0182","9,37: 0.0189","18,28: 0.0244","4,79: 0.0159","2,13: 0.0192","20,88: 0.0185","12,76: 0.0172","45,75: 0.0128","20,84: 0.0263","50,52: 0.0179","53,86: 0.0238","0,63: 0.0147","58,69: 0.0143","25,66: 0.0244","92,98: 0.0185","4,58: 0.0185","4,59: 0.0227","20,38: 0.0185","75,89: 0.0244","25,72: 0.0208","4,44: 0.0208","37,42: 0.0278","58,87: 0.0189","10,99: 0.0147","19,21: 0.0179","50,87: 0.0156","42,76: 0.0192","75,78: 0.0128","19,47: 0.0244","3,56: 0.0133","91,98: 0.0108","51,69: 0.0238","10,91: 0.0159","2,79: 0.0156","20,29: 0.0323","43,70: 0.0182","44,45: 0.0149","12,14: 0.0182","65,94: 0.0172","6,56: 0.0217","40,90: 0.0370","48,86: 0.0714","13,21: 0.0145","13,20: 0.0286","56,67: 0.0167","7,84: 0.0179","14,34: 0.0185","7,75: 0.0164","23,95: 0.0123","30,56: 0.0233","40,66: 0.0455","24,72: 0.0233","16,85: 0.0182","57,66: 0.0208","5,48: 0.0476","13,56: 0.0161","23,98: 0.0102","74,90: 0.0313","46,62: 0.0400","16,92: 0.0357","5,55: 0.0333","81,99: 0.0122","21,36: 0.0109","16,65: 0.0270","6,8: 0.0278","33,74: 0.0244","13,37: 0.0204","82,89: 0.0208","21,50: 0.0120","41,78: 0.0179","57,93: 0.0116","74,75: 0.0185","32,95: 0.0294","21,75: 0.0130","54,75: 0.0123","21,79: 0.0123","41,50: 0.0189","13,88: 0.0139","71,87: 0.0217","7,9: 0.0175","14,99: 0.0238","87,90: 0.0278","5,72: 0.0345","21,88: 0.0114","8,46: 0.0244","62,90: 0.0455","38,67: 0.0143","47,81: 0.0167","16,17: 0.0556","40,59: 0.0294","39,90: 0.0435","48,51: 0.1250","47,85: 0.0167","54,96: 0.0172","22,90: 0.0244","23,59: 0.0145","88,91: 0.0111","23,58: 0.0127","39,77: 0.0435","72,77: 0.0370","55,95: 0.0213","31,56: 0.0159","38,97: 0.0161","63,93: 0.0112","39,71: 0.0303","30,93: 0.0189"]
l1.sort()
l2.sort()
for i in range(len(l1)):
    if l1[i] != l2[i]:
        print(l1[i], l2[i])
