"""
Given an array of integers A, consider all non-empty subsequences of A.

For any sequence S, let the width of S be the difference between the maximum and minimum element of S.

Return the sum of the widths of all subsequences of A. 

As the answer may be very large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: [2,1,3]
Output: 6
Explanation:
Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.
 

Note:

1 <= A.length <= 20000
1 <= A[i] <= 20000
"""
class Solution:
    def sumSubseqWidths(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        large_num = 10**9+7
        ans = 0
        if len(A) == 1:
            return ans

        A = sorted(A)
        # print(A)
        for i in range(len(A)-1):
            for j in range(i+1, len(A)):
                # print(A[j], A[i])
                diff_val = A[j] - A[i]
                ans += 2**(j-i-1) * diff_val
        return ans % large_num



"""
Thoughts:
the efficiency of the solution is O(N^2), which is not enough, it is important to optimize it
the solution below is much more elegant.
sort(A), n = len(A). so A[0] is the minimum number in 2**(n-1-0) subsequences(the maximum can not be same) and the maximus in 2**0-1 subsequecnes. so the value contribution is (-2**n-1)*A[0].
for A[1], it is min in 2**(n-1-1)-1 and max in 2**1-1, the value contribution is (2**1 - 2**(n-2)) * A[1]
the general formula is (2**index - 2**(n-1-index))*A[index]
"""
class Solution_1:
    def sumSubseqWidths(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        large_num = 10**9+7
        ans = 0
        if len(A) == 1:
            return ans
        A = sorted(A)
        n = len(A)
        for index, num in enumerate(A):
            ans = ((2**index - 2**(n-1-index))*num)%large_num

        return ans%large_num





# s = Solution()
s = Solution_1()
A = [2,1,3]
print(s.sumSubseqWidths(A))
A = [779,72,1481,597,1687,427,919,636,156,1530,1299,319,1676,697,473,997,1431,965,1311,1669,609,3,1983,1466,651,938,544,194,1007,1821,166,710,568,1171,491,692,492,20,1422,181,248,1342,1803,1079,1886,767,1551,405,729,1289,841,1470,1037,119,227,1916,1446,922,501,760,1200,1703,1391,685,727,342,220,1836,591,313,714,1230,746,1575,472,570,16,550,1245,498,680,804,884,661,540,1433,573,24,1127,744,1486,61,1876,1574,1647,405,686,1976,1249,1108,18,1278,1388,1269,1006,1505,1734,733,1087,1143,22,1505,432,1828,66,501,937,933,1117,1472,970,97,640,879,1700,112,1978,1620,47,605,1249,116,412,2000,1439,1305,366,1455,1620,435,1445,893,1115,684,1575,760,1058,1717,948,1977,1900,397,341,735,1693,251,232,1952,352,787,456,1715,1129,840,1126,1322,838,1205,1387,1608,1654,950,720,1804,727,1303,1916,1326,607,1175,834,401,1215,74,753,1632,28,665,55,1,917,1109,1293,1773,1896,327,1183,1471,1863,638,765,729,1575,802,1179,830,1805,558,674,1659,267,1133,938,1161,121,1111,1055,32,1981,1780,1153,638,449,1020,1110,151,1845,567,380,1724,1553,750,1435,37,86,1983,1280,1284,1192,1850,1999,50,108,1145,30,1187,618,41,1917,1586,881,579,120,1900,1460,1216,722,814,131,1461,1278,298,1370,1004,426,60,1659,1401,464,1366,1632,1084,650,8,294,703,517,1059,1029,40,1067,492,979,771,143,1302,838,198,416,611,1749,1232,263,42,1931,1735,203,1935,240,1201,531,1251,1692,1325,144,1409,620,651,1691,742,177,431,785,1998,289,1600,657,970,663,1602,1602,869,1529,1505,638,1437,1500,1649,1498,1103,66,1499,1997,1075,389,1241,1046,235,343,1654,7,393,149,713,831,1756,104,1803,1243,1419,145,290,983,1666,969,953,1919,1552,771,1016,804,1507,642,1549,655,660,934,1228,886,65,1806,997,1261,676,1521,1592,458,1037,1529,1993,1956,1115,298,1218,1485,1249,437,661,1043,1537,60,138,1137,1451,559,1206,843,1225,1751,184,1861,1536,1678,1470,102,365,960,1820,937,729,1897,730,783,526,82,333,1295,1219,423,644,1149,781,1232,435,348,1733,1766,1138,1435,704,181,336,673,1895,771,898,1736,458,1248,1632,1629,1818,1109,103,1725,491,1364,248,829,609,319,1964,1245,1910,1289,566,439,662,1218,1946,1067,1677,178,1885,1494,1854,1719,585,1588,1398,836,1606,588,1976,760,1703,515,1856,454,1791,1770,567,211,755,532,1913,1660,946,1095,1371,525,999,1841,406,149,12,1284,1383,663,855,1081,741,42,1700,1852,381,1350,1431,1550,1773,721,1863,1896,104,288,1718,1731,1062,67,885,1543,124,1617,1798,1508,270,529,1575,1157,1363,1560,1086,710,1379,326,1067,703,1764,1053,1518,813,1887,937,1690,854,27,1638,1839,1237,1935,187,350,863,568,1059,935,1869,1600,1168,455,327,1111,939,1540,1774,1161,1076,1919,756,252,303,651,68,337,1927,977,908,1284,1513,323,1147,1759,1953,153,850,997,1736,351,478,169,845,4,1155,881,1699,707,1176,1140,1492,1276,278,1464,1480,1149,581,1471,1412,1485,1784,1265,1434,555,813,977,1210,612,46,1435,1431,396,1302,1042,340,174,1351,1994,1144,1740,1728,1450,1088,1529,249,1397,152,764,709,516,615,781,29,48,292,1149,212,1341,1451,1864,672,871,1786,126,891,1532,1698,1707,1806,584,753,167,537,1271,1344,343,246,1016,30,396,1716,1943,269,1744,280,685,1900,495,801,773,232,662,740,1050,1804,932,1327,1684,957,876,1265,179,1022,1013,1852,1689,991,1375,710,1316,1589,508,104,1328,571,103,1920,1971,1979,1677,1003,1011,589,1439,1694,1440,1258,1577,109,1300,854,127,1875,675,1339,329,1407,726,383,1759,305,89,1812,1085,1700,945,1669,1658,817,1921,181,628,1935,1084,185,485,1707,147,1423,702,1041,1918,275,1965,1031,1729,1751,1811,560,75,1941,999,105,1318,1538,1049,552,426,344,1469,1449,72,1937,1518,1660,1129,865,1103,1026,320,231,424,357,898,512,858,958,1432,794,807,1513,40,1922,1019,393,1803,1150,1553,1912,786,1023,1500,970,750,538,1040,1243,148,1779,876,1744,553,670,982,1552,1539,858,1119,1587,381,1680,1819,1598,331,1441,172,109,384,1346,802,1289,858,450,1319,1460,1121,147,1611,1517,102,525,620,1684,498,1040,1885,612,936,159,1727,1336,1416,1859,1462,416,1289,971,519,1371,1071,1425,1297,551,919,1817,1472,918,1550,175,718,1608,1997,1147,1901,89,456,884,1017,817,1680,1499,109,433,55,1261,1365,1567,1186,403,1774,781,458,1319,706,1117,437,1617,1153,489,561,1412,322,1880,1337,1024,243,1458,19,663,1260,160,890,1327,53,1942,645,1033,810,828,1819,693,1654,1611,196,500,414,348,1090,1416,1380,1195,525,958,1707,967,1988,1453,1154,1724,701,393,613,69,366,1199,1588,1578,832,1551,1514,812,61,1651,892,237,1685,1637,1239,1635,1177,1222,920,1665,1525,1516,1219,1097,884,1480,689,1309,384,1799,206,1404,997,485,1321,68,811,302,1536,546,123,1581,1530,1947,267,848,792,962,85,340,1010,112,368,837,1173,1775,636,1526,208]
print(s.sumSubseqWidths(A))
