"""
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""
"""
Thoughts:
use a list connections to store the number of nodes connected to the initial nodes, remove the one got the largest connections
"""
class Solution_1:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        """
        this solution can solve the problem, but the function connected_nodes_num is not very efficient, if the graph is very large, it is quite slow and have lots of repeated calculation.
        """
        def connected_nodes_num(initial_node):
            """
            return the nodes that conneted to initial_node, direct or indirect
            """
            connected_nodes = [initial_node]
            connected_nodes_set = {initial_node}
            while connected_nodes:
                node = connected_nodes.pop()
                for index,connection in enumerate(graph[node]):
                    if (index not in connected_nodes_set) and (connection == 1) : 
                        connected_nodes.append(index)
                        connected_nodes_set.add(node)
            return connected_nodes_set

        initial_set = set(initial)
        connected_initial = set()
        # print("nodes conneted to 8")
        for i in initial:
            if i not in connected_initial:
                connected_nodes_tmp = connected_nodes_num(i) & initial_set
                if len(connected_nodes_tmp) > 1:
                    # a node always connect to itself
                        connected_initial |= connected_nodes_tmp

        # print(8, connected_nodes_num(8))
        
        not_connected_initial = initial_set - connected_initial

        if not not_connected_initial:
            # all initial all connected, return the minimun one
            return min(initial)
        # print("not_connected_initial",not_connected_initial)
        
        removed_node = not_connected_initial.pop()
        max_tmp_node = len(connected_nodes_num(removed_node))
        # print(removed_node, max_tmp_node)
        for initial_node in not_connected_initial:
            connections = len(connected_nodes_num(initial_node))
            # print(initial_node, connections)
            if connections > max_tmp_node:
                max_tmp_node = connections
                removed_node = initial_node
            elif connections == max_tmp_node and initial_node < removed_node:
                removed_node = initial_node
        return removed_node


class Solution_2:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        """
        Thoughts:
        according to the graph, patrite the nodes into one set if they are connected(direct or indirect). if a set has more than two initial node in it, it is useless to remove any of the initial.
        So we need to find the the largest set that got only one initial in it, if there's no such set, return the smallest node.
        """
        def connected_nodes_set(initial_node):
            """
            return the nodes that conneted to initial_node, direct or indirect
            """
            connected_nodes = [initial_node]
            connected_nodes_set = {initial_node}
            while connected_nodes:
                node = connected_nodes.pop()
                for index,connection in enumerate(graph[node]):
                    if (connection == 1) and (index not in connected_nodes_set) : 
                        connected_nodes.append(index)
                        connected_nodes_set.add(node)
            return connected_nodes_set


        initial_set = set(initial)
        all_nodes_set = set()
        nodes_set_list = []
        for i in initial_set:
            if i not in all_nodes_set:
                tmp_set = connected_nodes_set(i)
                all_nodes_set |= tmp_set
                nodes_set_list.append(tmp_set)


        # print("all_nodes_set")
        # print(all_nodes_set)
        # print("nodes_set_list")
        nodes_set_list = sorted(nodes_set_list, key = len, reverse = True )
        # print(nodes_set_list)
        for nodes_set in nodes_set_list:
            tmp_set = nodes_set & initial_set
            if len(tmp_set) == 1:
                res = tmp_set.pop()
                return res
        return min(initial)

class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        """
        Thoughts:
        Solution_2 is still too slow, may be connected_nodes_set is tht problem, try to use depth first search to group the nodes.
        This solution can pass the test, in the function connected_nodes_set, you have to append all the nodes connected to the the pop node at once, so the calculation grows very fast.
        In dfs, we can store the informaiton in colors dict, and check it in every node, may be it is the reason why it is faster.
        """
        def dfs(color, node):
            """
            group node to different color if they are not connected
            """
            colors[node] = color
            for index, value in enumerate(graph[node]):
                if value and index not in colors:
                    dfs(color, index)


        #color or the node
        N = len(graph)
        colors = dict()
        color = 0
        for node in range(N):
            if node not in colors:
                dfs(color,node)
                color += 1

        # print("colors")
        # print(colors)
        #make the nodes that got the same color a set, all set combines to a list
        #initialize nodes_set_list with empty set, then add node to the corresponding set
        nodes_set_list = []
        for i in range(color):
            nodes_set_list.append(set())
        for _node, _color in colors.items():
            nodes_set_list[_color].add(_node)



        # print("nodes_set_list")
        initial_set = set(initial)
        nodes_set_list = sorted(nodes_set_list, key = len, reverse = True )
        # print(nodes_set_list)
        for nodes_set in nodes_set_list:
            tmp_set = nodes_set & initial_set
            if len(tmp_set) == 1:
                res = tmp_set.pop()
                return res
        return min(initial)


s = Solution()
s1 = Solution_1()
graph = [[1,1,0],[1,1,0],[0,0,1]]
initial = [0,1]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))
graph = [[1,0,0],[0,1,0],[0,0,1]]
initial = [0,2]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))
graph = [[1,1,1],[1,1,1],[1,1,1]]
initial = [1,2]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))
graph = [[1,0,0,1,0],[0,1,0,0,1],[0,0,1,0,0],[1,0,0,1,0],[0,1,0,0,1]]
initial = [0,4]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))
graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[0,1,1,0,0,1,0,0,0,0],[0,1,0,1,0,0,0,1,0,1],[0,0,0,0,1,0,1,0,0,0],[0,0,1,0,0,1,0,0,0,1],[0,0,0,0,1,0,1,0,1,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,1,0],[0,0,0,1,0,1,0,0,0,1]]
initial = [3,1,9]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))
graph = [[1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0],[1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1],[0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0],[0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1],[1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1],[1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0],[1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1],[0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0],[0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0],[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0],[1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0],[0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1],[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0],[1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1]]
initial = [27,8,33,47,31,26,15]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))

graph = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]]
initial = [3,1]
print("##################")
print("initial", initial)
print(s.minMalwareSpread(graph, initial))
print(s1.minMalwareSpread(graph, initial))

