"""
A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.

Given the string s and the integer k. There can be multiple ways to restore the array.

Return the number of possible array that can be printed as a string s using the mentioned program.

The number of ways could be very large so return it modulo 10^9 + 7

 

Example 1:

Input: s = "1000", k = 10000
Output: 1
Explanation: The only possible array is [1000]
Example 2:

Input: s = "1000", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.
Example 3:

Input: s = "1317", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
Example 4:

Input: s = "2020", k = 30
Output: 1
Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.
Example 5:

Input: s = "1234567890", k = 90
Output: 34
 

Constraints:

1 <= s.length <= 10^5.
s consists of only digits and doesn't contain leading zeros.
1 <= k <= 10^9.
"""

from functools import lru_cache
import sys
sys.setrecursionlimit(10**9) 
class Solution:
    def numberOfArrays(self, string: str, k: int) -> int:
        def valid(string):
            if len(string) >= len_k:
                return False
            return str(int(string)) == string and 1 <= int(string) <= k

        @lru_cache(None)
        def dfs(string):
            if not string:
                return 0
            res = valid(string)
            for i in range(1, len_k):
                pre = string[:i]
                if valid(pre):
                    res = (res + dfs(string[i:])) % M
            return res % M

        len_k = len(str(k)) + 1
        M = 10**9 + 7
        return dfs(string)


class Solution:
    def numberOfArrays(self, string: str, k: int) -> int:
        def valid(string):
            if len(string) >= len_k:
                return False
            return str(int(string)) == string and 1 <= int(string) <= k

        def dfs(string):
            if string in memo:
                return memo[string]
            if not string:
                return 0
            res = valid(string)
            for i in range(1, len_k):
                pre = string[:i]
                if valid(pre):
                    res = (res + dfs(string[i:])) % M
            memo[string] = res % M
            return memo[string]

        memo = dict()
        len_k = len(str(k)) + 1
        M = 10**9 + 7
        return dfs(string)

class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        def dfs(i, memo):
            if i == len(s): 
                return 1
            if s[i] == '0': 
                return 0
            if i in memo: 
                return memo[i]
            memo[i] = 0
            for j in range(i, len(s)):
                if int(s[i: j + 1]) > k:
                    break
                memo[i] += dfs(j + 1, memo)    
            return memo[i]    
        return dfs(0, {}) % (10 ** 9 + 7) 


class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        def valid(string):
            return str(int(string)) == string and 1 <= int(string) <= k

        length = len(s)
        len_k = len(str(k))
        dp = [0]*(length + 1)
        dp[0] = 1
        dp[1] = 1
        M = 10**9 + 7
        for i in range(1, length):
            for j in range(len_k):
                if i-j >= 0 and valid(s[i-j:i+1]):
                    dp[i+1] += dp[i-j]
        return dp[-1] % M


class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        l=len(str(k))
        dp = [0]*(len(s)+l) #+l to avoid messy condition checks for last l elements
        dp[-l]=1    #when we select string till last element
        for i in range(len(s)-1,-1,-1):
            #no number starting from 0 is allowed, so skip it
            if s[i]=='0': 
                continue
            #number starting from index i and having length from 1 to l-1,a s they all are valid
            for j in range(i,i+l-1): #他这里没有跳出，所以一直加到i+l-1位的所有dp组合
                dp[i]+=dp[j+1]
            #if length is same then check for validity
            if i+l-1<len(s) and int(s[i:i+l])<=k:
                dp[i]+=dp[i+l]
            dp[i]%=1000000007
        return dp[0]

        
S = Solution()
# string = "1000"
# k = 10000
# print(S.numberOfArrays(string, k))
# string = "1000"
# k = 10
# print(S.numberOfArrays(string, k))
# string = "1317"
# k = 2000
# print(S.numberOfArrays(string, k))
# string = "2020"
# k = 30
# print(S.numberOfArrays(string, k))
# string = "1234567890"
# k = 90
# print(S.numberOfArrays(string, k))
string = "2553462832281151811513004352253111"
k = 456
print(S.numberOfArrays(string, k))
string
k = 1000000000
print(S.numberOfArrays(string, k))