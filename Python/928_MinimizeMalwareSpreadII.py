"""
(This problem is the same as Minimize Malware Spread, with the differences bolded.)

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""


class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        """
        wrong for the test case:
        graph = [[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]
        initial =[6,0,4]
        the infected nodes are: 0,2,4,6
        2 can be infected by both 4 and 6
        so we should remove 0 instead of 4
        """
        def dfs(node):
            visited.add(node)
            res = 1
            for i in range(length):
                if i not in visited and graph[node][i] == 1:
                    res += dfs(i)
            return res

        for row in graph:
            print(row)
        length = len(graph)
        initial.sort()
        
        res, res_index = 0, None
        for node in initial:
            visited = set(initial)
            tmp = dfs(node)
            print(node,tmp, res)
            if tmp > res:
                res_index = node
                res = tmp
        return res_index


from collections import Counter
from collections import defaultdict
class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        def dfs(node):
            infected.add(node)
            for i in range(length):
                if (i in clean) and (i not in infected) and (graph[node][i] == 1):
                    dfs(i)

        length = len(graph)
        initial.sort()
        initial_set = set(initial)
        clean = set(range(length)) - initial_set

        source = defaultdict(list)
        for node in initial:
            infected = set()
            dfs(node)
            for j in infected:
                source[j].append(node)

        initial_counter = Counter([v[0] for v in source.values() if len(v) == 1])
        res, res_index = 0, None
        for k, v in initial_counter.items():
            if v > res or (v == res and k < res_index):
                res = v
                res_index = k
        return res_index


from collections import Counter
from collections import defaultdict
from collections import deque
class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        length = len(graph)
        initial_set = set(initial)
        clean = set(range(length)) - initial_set
        source = defaultdict(list)
        
        for node in initial:
            bfs = deque([node])
            infected = set()
            while bfs:
                i = bfs.popleft()
                for j in range(length):
                    if j not in infected and j in clean and graph[i][j] == 1:
                        infected.add(j)
                        source[j].append(node)
                        bfs.append(j)

        res = [0] * length
        for nodes in source.values():
            if len(nodes) == 1:
                res[nodes[0]] += 1
        if max(res) == 0:
            return min(initial)
        return res.index(max(res))


from collections import Counter
from collections import defaultdict
from itertools import combinations
class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        def find(i):
            if parents[i] != i:
                parents[i] = find(parents[i])
            return parents[i]

        def union(i,j):
            root_i, root_j = find(i), find(j)
            if root_i != root_j:
                if size[root_i] > size[root_j]:
                    parents[root_j] = root_i
                    size[root_i] += size[root_j]
                else:
                    parents[root_i] = root_j
                    size[root_j] += size[root_i]

        length = len(graph)
        initial_set = set(initial)
        clean = set(range(length)) - initial_set
        source = defaultdict(list)
        parents = list(range(length))
        size = [1]*length

        for i,j in combinations(clean, 2):
            if graph[i][j] == 1:
                union(i, j)

        infected, source, res, res_index = defaultdict(set), Counter(), -1, min(initial)

        for u in initial:
            for v in clean:
                if graph[u][v]:
                    infected[u].add(find(v))
            for i in infected[u]:
                source[i] += 1

        for i, nodes in infected.items():
            count = 0
            for node in nodes:
                if source[node] == 1:
                    count += size[node]
            if count > res or (count == res and i < res_index):
                res, res_index = count, i
        return res_index


# https://leetcode.com/problems/minimize-malware-spread-ii/discuss/253064/python-union-find-beat-100
# import collections
# import itertools
# class Solution:
#     def minMalwareSpread(self, graph, initial):
#         N = len(graph)
#         clean = list(set(range(N)) - set(initial))
#         parents, size = list(range(N)), [1] * N
        
#         def find(a):
#             while parents[a] != a:
#                 parents[a] = parents[parents[a]]
#                 a = parents[a]
#             return a
        
#         def union(a, b):
#             ra, rb = find(a), find(b)
#             if ra != rb:
#                 if size[ra] > size[rb]:
#                     parents[rb] = ra
#                     size[ra] += size[rb]
#                 else:
#                     parents[ra] = rb
#                     size[rb] += size[ra]
                    
#         for u, v in itertools.combinations(clean, 2):
#             if graph[u][v]: union(u, v)
                
#         infect_node, infected_by, max, res = collections.defaultdict(set), collections.Counter(), -1, min(initial)
        
#         for u in initial:
#             for v in clean:
#                 if graph[u][v]:
#                     infect_node[u].add(find(v))
#             for i in infect_node[u]:
#                 infected_by[i] += 1
                
#         for i, nodes in infect_node.items():
#             count = 0
#             for node in nodes:
#                 if infected_by[node] == 1: count += size[node]
#             if count > max or count == max and i < res:
#                 max, res = count, i
#         return res

S = Solution()
graph = [[1,1,0],[1,1,0],[0,0,1]]
initial = [0,1]
print(S.minMalwareSpread(graph, initial))
graph = [[1,1,0],[1,1,1],[0,1,1]]
initial = [0,1]
print(S.minMalwareSpread(graph, initial))
graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]
initial = [0,1]
print(S.minMalwareSpread(graph, initial))
graph = [[1,1,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1]]
initial = [3,0]
print(S.minMalwareSpread(graph, initial))
graph = [[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]
initial =[6,0,4]
print(S.minMalwareSpread(graph, initial))